# Multi-stage Dockerfile for optimized Cloud Run deployment
FROM python:3.7-slim as builder

# System deps for building
RUN apt-get update && apt-get install -y \
    build-essential \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgl1-mesa-glx \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python packages
COPY requirements-cloud.txt ./requirements.txt
RUN pip install --no-cache-dir --upgrade pip==22.3.1 setuptools==65.5.0 wheel \
    && pip install --no-cache-dir --timeout 1000 --retries 5 -r requirements.txt

# Download model during build
RUN wget -O ssd_mobilenet_v1_coco_11_06_2017.tar.gz \
    https://storage.googleapis.com/download.tensorflow.org/models/object_detection/ssd_mobilenet_v1_coco_11_06_2017.tar.gz && \
    tar -xzf ssd_mobilenet_v1_coco_11_06_2017.tar.gz && \
    rm ssd_mobilenet_v1_coco_11_06_2017.tar.gz

# Final stage
FROM python:3.7-slim

# System deps (runtime only)
RUN apt-get update && apt-get install -y \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgl1-mesa-glx \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python packages from builder
COPY --from=builder /usr/local/lib/python3.7/site-packages /usr/local/lib/python3.7/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application files
COPY . .

# Copy model from builder
COPY --from=builder /ssd_mobilenet_v1_coco_11_06_2017 ./ssd_mobilenet_v1_coco_11_06_2017

# Ensure label map is available
COPY mscoco_label_map.pbtxt ./

# Verify model files exist
RUN ls -la ssd_mobilenet_v1_coco_11_06_2017/ && \
    test -f ssd_mobilenet_v1_coco_11_06_2017/frozen_inference_graph.pb && \
    echo "âœ… Model files verified in Docker image"

# Create non-root user
RUN useradd --create-home --shell /bin/bash app && chown -R app:app /app
USER app

ENV PYTHONUNBUFFERED=1
ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
ENV PORT=8080

EXPOSE 8080

# Run FastAPI server
CMD ["sh", "-c", "uvicorn main:app --host 0.0.0.0 --port ${PORT} --log-level info"]